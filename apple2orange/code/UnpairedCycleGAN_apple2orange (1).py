{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "30ca6d4f-a69a-4901-9dc6-f7374415eb79",
   "metadata": {},
   "source": [
    "### Importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1da09445-d9ab-416c-90f4-9b040db58f76",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:52:07.810285: I tensorflow/core/util/port.cc:110] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n",
      "2023-05-04 21:52:07.930987: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2023-05-04 21:52:13.820086: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n"
     ]
    }
   ],
   "source": [
    "from random import random\n",
    "from numpy import load\n",
    "from numpy import zeros\n",
    "from numpy import ones\n",
    "from numpy import asarray\n",
    "from numpy.random import randint\n",
    "from keras.optimizers import Adam\n",
    "from keras.initializers import RandomNormal\n",
    "\n",
    "from keras.models import Model\n",
    "#from tensorflow.python.keras.models import Input\n",
    "#from keras.models import Input\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "#from keras.layers import Input, Dense, LSTM\n",
    "from tensorflow.keras.layers import Input\n",
    "#from tensorflow.python.keras.models import Input\n",
    "\n",
    "from keras.layers import Conv2D\n",
    "from keras.layers import Conv2DTranspose\n",
    "from keras.layers import LeakyReLU\n",
    "from keras.layers import Activation\n",
    "from keras.layers import Concatenate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39e9325c-4b29-473b-bcaf-a5a6da8f7d18",
   "metadata": {},
   "source": [
    "### Importing InstanceNormalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a9981b11-3199-45fc-9752-c5df007f0009",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import Layer, InputSpec\n",
    "from keras import initializers, regularizers, constraints\n",
    "from keras import backend as K\n",
    "\n",
    "class InstanceNormalization(Layer):\n",
    "    \"\"\"Instance normalization layer.\n",
    "    Normalize the activations of the previous layer at each step,\n",
    "    i.e. applies a transformation that maintains the mean activation\n",
    "    close to 0 and the activation standard deviation close to 1.\n",
    "    # Arguments\n",
    "        axis: Integer, the axis that should be normalized\n",
    "            (typically the features axis).\n",
    "            For instance, after a `Conv2D` layer with\n",
    "            `data_format=\"channels_first\"`,\n",
    "            set `axis=1` in `InstanceNormalization`.\n",
    "            Setting `axis=None` will normalize all values in each\n",
    "            instance of the batch.\n",
    "            Axis 0 is the batch dimension. `axis` cannot be set to 0 to avoid errors.\n",
    "        epsilon: Small float added to variance to avoid dividing by zero.\n",
    "        center: If True, add offset of `beta` to normalized tensor.\n",
    "            If False, `beta` is ignored.\n",
    "        scale: If True, multiply by `gamma`.\n",
    "            If False, `gamma` is not used.\n",
    "            When the next layer is linear (also e.g. `nn.relu`),\n",
    "            this can be disabled since the scaling\n",
    "            will be done by the next layer.\n",
    "        beta_initializer: Initializer for the beta weight.\n",
    "        gamma_initializer: Initializer for the gamma weight.\n",
    "        beta_regularizer: Optional regularizer for the beta weight.\n",
    "        gamma_regularizer: Optional regularizer for the gamma weight.\n",
    "        beta_constraint: Optional constraint for the beta weight.\n",
    "        gamma_constraint: Optional constraint for the gamma weight.\n",
    "    # Input shape\n",
    "        Arbitrary. Use the keyword argument `input_shape`\n",
    "        (tuple of integers, does not include the samples axis)\n",
    "        when using this layer as the first layer in a Sequential model.\n",
    "    # Output shape\n",
    "        Same shape as input.\n",
    "    # References\n",
    "        - [Layer Normalization](https://arxiv.org/abs/1607.06450)\n",
    "        - [Instance Normalization: The Missing Ingredient for Fast Stylization](\n",
    "        https://arxiv.org/abs/1607.08022)\n",
    "    \"\"\"\n",
    "    def __init__(self,\n",
    "                 axis=None,\n",
    "                 epsilon=1e-3,\n",
    "                 center=True,\n",
    "                 scale=True,\n",
    "                 beta_initializer='zeros',\n",
    "                 gamma_initializer='ones',\n",
    "                 beta_regularizer=None,\n",
    "                 gamma_regularizer=None,\n",
    "                 beta_constraint=None,\n",
    "                 gamma_constraint=None,\n",
    "                 **kwargs):\n",
    "        super(InstanceNormalization, self).__init__(**kwargs)\n",
    "        self.supports_masking = True\n",
    "        self.axis = axis\n",
    "        self.epsilon = epsilon\n",
    "        self.center = center\n",
    "        self.scale = scale\n",
    "        self.beta_initializer = initializers.get(beta_initializer)\n",
    "        self.gamma_initializer = initializers.get(gamma_initializer)\n",
    "        self.beta_regularizer = regularizers.get(beta_regularizer)\n",
    "        self.gamma_regularizer = regularizers.get(gamma_regularizer)\n",
    "        self.beta_constraint = constraints.get(beta_constraint)\n",
    "        self.gamma_constraint = constraints.get(gamma_constraint)\n",
    "\n",
    "    def build(self, input_shape):\n",
    "        ndim = len(input_shape)\n",
    "        if self.axis == 0:\n",
    "            raise ValueError('Axis cannot be zero')\n",
    "\n",
    "        if (self.axis is not None) and (ndim == 2):\n",
    "            raise ValueError('Cannot specify axis for rank 1 tensor')\n",
    "\n",
    "        self.input_spec = InputSpec(ndim=ndim)\n",
    "\n",
    "        if self.axis is None:\n",
    "            shape = (1,)\n",
    "        else:\n",
    "            shape = (input_shape[self.axis],)\n",
    "\n",
    "        if self.scale:\n",
    "            self.gamma = self.add_weight(shape=shape,\n",
    "                                         name='gamma',\n",
    "                                         initializer=self.gamma_initializer,\n",
    "                                         regularizer=self.gamma_regularizer,\n",
    "                                         constraint=self.gamma_constraint)\n",
    "        else:\n",
    "            self.gamma = None\n",
    "        if self.center:\n",
    "            self.beta = self.add_weight(shape=shape,\n",
    "                                        name='beta',\n",
    "                                        initializer=self.beta_initializer,\n",
    "                                        regularizer=self.beta_regularizer,\n",
    "                                        constraint=self.beta_constraint)\n",
    "        else:\n",
    "            self.beta = None\n",
    "        self.built = True\n",
    "\n",
    "    def call(self, inputs, training=None):\n",
    "        input_shape = K.int_shape(inputs)\n",
    "        reduction_axes = list(range(0, len(input_shape)))\n",
    "\n",
    "        if self.axis is not None:\n",
    "            del reduction_axes[self.axis]\n",
    "\n",
    "        del reduction_axes[0]\n",
    "\n",
    "        mean = K.mean(inputs, reduction_axes, keepdims=True)\n",
    "        stddev = K.std(inputs, reduction_axes, keepdims=True) + self.epsilon\n",
    "        normed = (inputs - mean) / stddev\n",
    "\n",
    "        broadcast_shape = [1] * len(input_shape)\n",
    "        if self.axis is not None:\n",
    "            broadcast_shape[self.axis] = input_shape[self.axis]\n",
    "\n",
    "        if self.scale:\n",
    "            broadcast_gamma = K.reshape(self.gamma, broadcast_shape)\n",
    "            normed = normed * broadcast_gamma\n",
    "        if self.center:\n",
    "            broadcast_beta = K.reshape(self.beta, broadcast_shape)\n",
    "            normed = normed + broadcast_beta\n",
    "        return normed\n",
    "\n",
    "    def get_config(self):\n",
    "        config = {\n",
    "            'axis': self.axis,\n",
    "            'epsilon': self.epsilon,\n",
    "            'center': self.center,\n",
    "            'scale': self.scale,\n",
    "            'beta_initializer': initializers.serialize(self.beta_initializer),\n",
    "            'gamma_initializer': initializers.serialize(self.gamma_initializer),\n",
    "            'beta_regularizer': regularizers.serialize(self.beta_regularizer),\n",
    "            'gamma_regularizer': regularizers.serialize(self.gamma_regularizer),\n",
    "            'beta_constraint': constraints.serialize(self.beta_constraint),\n",
    "            'gamma_constraint': constraints.serialize(self.gamma_constraint)\n",
    "        }\n",
    "        base_config = super(InstanceNormalization, self).get_config()\n",
    "        return dict(list(base_config.items()) + list(config.items()))\n",
    "#fileContents = file.read()\n",
    "#from keras_contrib.layers.normalization.instancenormalization import InstanceNormalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "15f450f4-7669-4181-b26f-85a6b839e51e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a2ddc95-c4b9-4027-b2c5-8b289ae0d6b9",
   "metadata": {},
   "source": [
    "### Discriminator Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2214be0b-b5c4-480d-be64-a28a4714c5eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# discriminator model (70x70 patchGAN)\n",
    "# C64-C128-C256-C512\n",
    "#After the last layer, conv to 1-dimensional output, followed by a Sigmoid function.  \n",
    "# The “axis” argument is set to -1 for instance norm. to ensure that features are normalized per feature map.\n",
    "def define_discriminator(image_shape):\n",
    "    # weight initialization\n",
    "    init = RandomNormal(stddev=0.02)\n",
    "    # source image input\n",
    "    in_image = Input(shape=image_shape)\n",
    "    # C64: 4x4 kernel Stride 2x2\n",
    "    d = Conv2D(64, (4,4), strides=(2,2), padding='same', kernel_initializer=init)(in_image)\n",
    "    d = LeakyReLU(alpha=0.2)(d)\n",
    "    # C128: 4x4 kernel Stride 2x2\n",
    "    d = Conv2D(128, (4,4), strides=(2,2), padding='same', kernel_initializer=init)(d)\n",
    "    d = InstanceNormalization(axis=-1)(d)\n",
    "    d = LeakyReLU(alpha=0.2)(d)\n",
    "    # C256: 4x4 kernel Stride 2x2\n",
    "    d = Conv2D(256, (4,4), strides=(2,2), padding='same', kernel_initializer=init)(d)\n",
    "    d = InstanceNormalization(axis=-1)(d)\n",
    "    d = LeakyReLU(alpha=0.2)(d)\n",
    "    # C512: 4x4 kernel Stride 2x2 \n",
    "    # Not in the original paper. Comment this block if you want.\n",
    "    d = Conv2D(512, (4,4), strides=(2,2), padding='same', kernel_initializer=init)(d)\n",
    "    d = InstanceNormalization(axis=-1)(d)\n",
    "    d = LeakyReLU(alpha=0.2)(d)\n",
    "    # second last output layer : 4x4 kernel but Stride 1x1\n",
    "    d = Conv2D(512, (4,4), padding='same', kernel_initializer=init)(d)\n",
    "    d = InstanceNormalization(axis=-1)(d)\n",
    "    d = LeakyReLU(alpha=0.2)(d)\n",
    "    # patch output\n",
    "    patch_out = Conv2D(1, (4,4), padding='same', kernel_initializer=init)(d)\n",
    "    # define model\n",
    "    model = Model(in_image, patch_out)\n",
    "    # compile model\n",
    "    #The model is trained with a batch size of one image and Adam opt. \n",
    "    #with a small learning rate and 0.5 beta. \n",
    "    #The loss for the discriminator is weighted by 50% for each model update.\n",
    "    #This slows down changes to the discriminator relative to the generator model during training.\n",
    "    model.compile(loss='mse', optimizer=Adam(learning_rate=0.0002, beta_1=0.5), loss_weights=[0.5])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3404373f-f711-466d-8387-a743fa9bb818",
   "metadata": {},
   "source": [
    "###  Resnet bolck to be used in the generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6d677cde-692c-4bf9-83e3-548deeef2f7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# generator a resnet block to be used in the generator\n",
    "# residual block that contains two 3 × 3 convolutional layers with the same number of filters on both layers.\n",
    "def resnet_block(n_filters, input_layer):\n",
    "    # weight initialization\n",
    "    init = RandomNormal(stddev=0.02)\n",
    "    # first convolutional layer\n",
    "    g = Conv2D(n_filters, (3,3), padding='same', kernel_initializer=init)(input_layer)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    g = Activation('relu')(g)\n",
    "    # second convolutional layer\n",
    "    g = Conv2D(n_filters, (3,3), padding='same', kernel_initializer=init)(g)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    # concatenate merge channel-wise with input layer\n",
    "    g = Concatenate()([g, input_layer])\n",
    "    return g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d285ca3c-586b-4d4e-a523-a80ae4c7de68",
   "metadata": {},
   "source": [
    "### Generator model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2777da01-d29c-4c9b-a797-ab8f6b5f4509",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the  generator model - encoder-decoder type architecture\n",
    "\n",
    "#c7s1-k denote a 7×7 Convolution-InstanceNorm-ReLU layer with k filters and stride 1. \n",
    "#dk denotes a 3 × 3 Convolution-InstanceNorm-ReLU layer with k filters and stride 2.\n",
    "# Rk denotes a residual block that contains two 3 × 3 convolutional layers\n",
    "# uk denotes a 3 × 3 fractional-strided-Convolution InstanceNorm-ReLU layer with k filters and stride 1/2\n",
    "\n",
    "#The network with 6 residual blocks consists of:\n",
    "#c7s1-64,d128,d256,R256,R256,R256,R256,R256,R256,u128,u64,c7s1-3\n",
    "\n",
    "#The network with 9 residual blocks consists of:\n",
    "#c7s1-64,d128,d256,R256,R256,R256,R256,R256,R256,R256,R256,R256,u128, u64,c7s1-3\n",
    "\n",
    "def define_generator(image_shape, n_resnet=9):\n",
    "    # weight initialization\n",
    "    init = RandomNormal(stddev=0.02)\n",
    "    # image input\n",
    "    in_image = Input(shape=image_shape)\n",
    "    # c7s1-64\n",
    "    g = Conv2D(64, (7,7), padding='same', kernel_initializer=init)(in_image)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    g = Activation('relu')(g)\n",
    "    # d128\n",
    "    g = Conv2D(128, (3,3), strides=(2,2), padding='same', kernel_initializer=init)(g)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    g = Activation('relu')(g)\n",
    "    # d256\n",
    "    g = Conv2D(256, (3,3), strides=(2,2), padding='same', kernel_initializer=init)(g)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    g = Activation('relu')(g)\n",
    "    # R256\n",
    "    for _ in range(n_resnet):\n",
    "        g = resnet_block(256, g)\n",
    "    # u128\n",
    "    g = Conv2DTranspose(128, (3,3), strides=(2,2), padding='same', kernel_initializer=init)(g)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    g = Activation('relu')(g)\n",
    "    # u64\n",
    "    g = Conv2DTranspose(64, (3,3), strides=(2,2), padding='same', kernel_initializer=init)(g)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    g = Activation('relu')(g)\n",
    "    # c7s1-3\n",
    "    g = Conv2D(3, (7,7), padding='same', kernel_initializer=init)(g)\n",
    "    g = InstanceNormalization(axis=-1)(g)\n",
    "    out_image = Activation('tanh')(g)\n",
    "    # define model\n",
    "    model = Model(in_image, out_image)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9707cf7a-bd6a-4eb9-88c2-648909a0a799",
   "metadata": {},
   "source": [
    "### Composite model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc93cd4b-fd99-464b-a708-e2dfa681b261",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a composite model for updating generators by adversarial and cycle loss\n",
    "#We define a composite model that will be used to train each generator separately. \n",
    "def define_composite_model(g_model_1, d_model, g_model_2, image_shape):\n",
    "    # Make the generator of interest trainable as we will be updating these weights.\n",
    "    #by keeping other models constant.\n",
    "    #Remember that we use this same function to train both generators,\n",
    "    #one generator at a time. \n",
    "    g_model_1.trainable = True\n",
    "    # mark discriminator and second generator as non-trainable\n",
    "    d_model.trainable = False\n",
    "    g_model_2.trainable = False\n",
    "    \n",
    "    # adversarial loss\n",
    "    input_gen = Input(shape=image_shape)\n",
    "    gen1_out = g_model_1(input_gen)\n",
    "    output_d = d_model(gen1_out)\n",
    "    # identity loss\n",
    "    input_id = Input(shape=image_shape)\n",
    "    output_id = g_model_1(input_id)\n",
    "    # cycle loss - forward\n",
    "    output_f = g_model_2(gen1_out)\n",
    "    # cycle loss - backward\n",
    "    gen2_out = g_model_2(input_id)\n",
    "    output_b = g_model_1(gen2_out)\n",
    "    \n",
    "    # define model graph\n",
    "    model = Model([input_gen, input_id], [output_d, output_id, output_f, output_b])\n",
    "    \n",
    "    # define the optimizer\n",
    "    opt = Adam(learning_rate=0.0002, beta_1=0.5)\n",
    "    # compile model with weighting of least squares loss and L1 loss\n",
    "    model.compile(loss=['mse', 'mae', 'mae', 'mae'], \n",
    "               loss_weights=[1, 5, 10, 10], optimizer=opt)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7404e280-a39b-4224-b263-9f756d81e3ea",
   "metadata": {},
   "source": [
    "### Load and prepare training images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e465b362-33be-4bcc-bd8f-f0a18640f99d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load and prepare training images\n",
    "#def load_real_samples(filename):\n",
    "    # load the dataset\n",
    "    #data = load(filename)\n",
    "    # unpack arrays\n",
    "    #X1, X2 = data['arr_0'], data['arr_1']\n",
    "    # scale from [0,255] to [-1,1]\n",
    "    #X1 = (X1 - 127.5) / 127.5\n",
    "    #X2 = (X2 - 127.5) / 127.5\n",
    "    #return [X1, X2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58baac2f-67a1-4a28-acb9-7f172ebdb84c",
   "metadata": {},
   "source": [
    "### Real image generate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fed47f5f-60f9-4f7c-9485-b31e0010d776",
   "metadata": {},
   "outputs": [],
   "source": [
    "# select a batch of random samples, returns images and target\n",
    "#Remember that for real images the label (y) is 1. \n",
    "def generate_real_samples(dataset, n_samples, patch_shape):\n",
    "    # choose random instances\n",
    "    ix = randint(0, dataset.shape[0], n_samples)\n",
    "    # retrieve selected images\n",
    "    X = dataset[ix]\n",
    "    # generate 'real' class labels (1)\n",
    "    y = ones((n_samples, patch_shape, patch_shape, 1))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43aaaad2-6349-4cb2-a8f7-b23a3f12a7a3",
   "metadata": {},
   "source": [
    "### Fake image generate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bb8a9854-c4ef-436b-9bf3-d278337f0b38",
   "metadata": {},
   "outputs": [],
   "source": [
    "# generate a batch of images, returns images and targets\n",
    "#Remember that for fake images the label (y) is 0. \n",
    "def generate_fake_samples(g_model, dataset, patch_shape):\n",
    "    # generate fake images\n",
    "    X = g_model.predict(dataset)\n",
    "    # create 'fake' class labels (0)\n",
    "    y = zeros((len(X), patch_shape, patch_shape, 1))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37116b2e-451e-44ac-a0d0-970e61177c00",
   "metadata": {},
   "source": [
    "### Save model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f6b44a64-aa2a-4dac-ab60-deda13976965",
   "metadata": {},
   "outputs": [],
   "source": [
    "# periodically save the generator models to file\n",
    "def save_models(step, g_model_AtoB, g_model_BtoA):\n",
    "    # save the first generator model\n",
    "    filename1 = 'g_model_AtoB_%06d.h5' % (step+1)\n",
    "    g_model_AtoB.save(filename1)\n",
    "    # save the second generator model\n",
    "    filename2 = 'g_model_BtoA_%06d.h5' % (step+1)\n",
    "    g_model_BtoA.save(filename2)\n",
    "    print('>Saved: %s and %s' % (filename1, filename2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "035ac1ec-8519-4ba2-a789-5b43b647cce9",
   "metadata": {},
   "source": [
    "### Performance summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "85657fc7-0554-4c46-8307-4a2123b164a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# periodically generate images using the save model and plot input and output images\n",
    "def summarize_performance(step, g_model, trainX, name, n_samples=5):\n",
    "    # select a sample of input images\n",
    "    X_in, _ = generate_real_samples(trainX, n_samples, 0)\n",
    "    # generate translated images\n",
    "    X_out, _ = generate_fake_samples(g_model, X_in, 0)\n",
    "    # scale all pixels from [-1,1] to [0,1]\n",
    "    X_in = (X_in + 1) / 2.0\n",
    "    X_out = (X_out + 1) / 2.0\n",
    "    # plot real images\n",
    "    for i in range(n_samples):\n",
    "        pyplot.subplot(2, n_samples, 1 + i)\n",
    "        pyplot.axis('off')\n",
    "        pyplot.imshow(X_in[i])\n",
    "    # plot translated image\n",
    "    for i in range(n_samples):\n",
    "        pyplot.subplot(2, n_samples, 1 + n_samples + i)\n",
    "        pyplot.axis('off')\n",
    "        pyplot.imshow(X_out[i])\n",
    "    # save plot to file\n",
    "    filename1 = '%s_generated_plot_%06d.png' % (name, (step+1))\n",
    "    pyplot.savefig(filename1)\n",
    "    pyplot.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26e2132e-94a4-4b1e-95a5-d750bbba4f61",
   "metadata": {},
   "source": [
    "### Update image pool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8a0a8244-0d57-4da2-b7a4-53f8115b577c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# update image pool for fake images to reduce model oscillation\n",
    "# update discriminators using a history of generated images \n",
    "#rather than the ones produced by the latest generators.\n",
    "#Original paper recommended keeping an image buffer that stores \n",
    "#the 50 previously created images.\n",
    "\n",
    "def update_image_pool(pool, images, max_size=50):\n",
    "    selected = list()\n",
    "    for image in images:\n",
    "        if len(pool) < max_size:\n",
    "            # stock the pool\n",
    "            pool.append(image)\n",
    "            selected.append(image)\n",
    "        elif random() < 0.5:\n",
    "            # use image, but don't add it to the pool\n",
    "            selected.append(image)\n",
    "        else:\n",
    "        # replace an existing image and use replaced image\n",
    "            ix = randint(0, len(pool))\n",
    "            selected.append(pool[ix])\n",
    "            pool[ix] = image\n",
    "    return asarray(selected)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8864878f-2462-49e3-b8db-b3f4a03002cd",
   "metadata": {},
   "source": [
    "### Train CycleGAN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b6bae040-3e19-4e86-8dc0-3aaa6b89d4b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train cyclegan models\n",
    "def train(d_model_A, d_model_B, g_model_AtoB, g_model_BtoA, c_model_AtoB, c_model_BtoA, dataset, epochs=1):\n",
    "    # define properties of the training run\n",
    "    n_epochs, n_batch, = epochs, 1  #batch size fixed to 1 as suggested in the paper\n",
    "    # determine the output square shape of the discriminator\n",
    "    n_patch = d_model_A.output_shape[1]\n",
    "    # unpack dataset\n",
    "    trainA, trainB = dataset\n",
    "    # prepare image pool for fake images\n",
    "    poolA, poolB = list(), list()\n",
    "    # calculate the number of batches per training epoch\n",
    "    bat_per_epo = int(len(trainA) / n_batch)\n",
    "    # calculate the number of training iterations\n",
    "    n_steps = bat_per_epo * n_epochs\n",
    "    \n",
    "    # manually enumerate epochs\n",
    "    for i in range(n_steps):\n",
    "        # select a batch of real samples from each domain (A and B)\n",
    "        X_realA, y_realA = generate_real_samples(trainA, n_batch, n_patch)\n",
    "        X_realB, y_realB = generate_real_samples(trainB, n_batch, n_patch)\n",
    "        # generate a batch of fake samples using both B to A and A to B generators.\n",
    "        X_fakeA, y_fakeA = generate_fake_samples(g_model_BtoA, X_realB, n_patch)\n",
    "        X_fakeB, y_fakeB = generate_fake_samples(g_model_AtoB, X_realA, n_patch)\n",
    "        # update fake images in the pool. Remember that the paper suggstes a buffer of 50 images\n",
    "        X_fakeA = update_image_pool(poolA, X_fakeA)\n",
    "        X_fakeB = update_image_pool(poolB, X_fakeB)\n",
    "        \n",
    "        # update generator B->A via the composite model\n",
    "        g_loss2, _, _, _, _  = c_model_BtoA.train_on_batch([X_realB, X_realA], [y_realA, X_realA, X_realB, X_realA])\n",
    "        # update discriminator for A -> [real/fake]\n",
    "        dA_loss1 = d_model_A.train_on_batch(X_realA, y_realA)\n",
    "        dA_loss2 = d_model_A.train_on_batch(X_fakeA, y_fakeA)\n",
    "        \n",
    "        # update generator A->B via the composite model\n",
    "        g_loss1, _, _, _, _ = c_model_AtoB.train_on_batch([X_realA, X_realB], [y_realB, X_realB, X_realA, X_realB])\n",
    "        # update discriminator for B -> [real/fake]\n",
    "        dB_loss1 = d_model_B.train_on_batch(X_realB, y_realB)\n",
    "        dB_loss2 = d_model_B.train_on_batch(X_fakeB, y_fakeB)\n",
    "        \n",
    "        # summarize performance\n",
    "        #Since our batch size =1, the number of iterations would be same as the size of our dataset.\n",
    "        #In one epoch you'd have iterations equal to the number of images.\n",
    "        #If you have 100 images then 1 epoch would be 100 iterations\n",
    "        print('Iteration>%d, dA[%.3f,%.3f] dB[%.3f,%.3f] g[%.3f,%.3f]' % (i+1, dA_loss1,dA_loss2, dB_loss1,dB_loss2, g_loss1,g_loss2))\n",
    "        # evaluate the model performance periodically\n",
    "        #If batch size (total images)=100, performance will be summarized after every 75th iteration.\n",
    "        if (i+1) % (bat_per_epo * 1) == 0:\n",
    "            # plot A->B translation\n",
    "            summarize_performance(i, g_model_AtoB, trainA, 'AtoB')\n",
    "            # plot B->A translation\n",
    "            summarize_performance(i, g_model_BtoA, trainB, 'BtoA')\n",
    "        if (i+1) % (bat_per_epo * 5) == 0:\n",
    "            # save the models\n",
    "            # #If batch size (total images)=100, model will be saved after \n",
    "            #every 75th iteration x 5 = 375 iterations.\n",
    "            save_models(i, g_model_AtoB, g_model_BtoA)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f260f78-0a0b-4698-a4ee-8e44eadf2177",
   "metadata": {},
   "source": [
    "### apple2orange Photo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9872cd83-ab3c-4f83-b6d7-beb0399f9353",
   "metadata": {},
   "outputs": [],
   "source": [
    "# PhotoA2PhotoB\n",
    "from os import listdir\n",
    "from numpy import asarray\n",
    "from numpy import vstack\n",
    "from tensorflow.keras.preprocessing.image import load_img\n",
    "from tensorflow.keras.preprocessing.image import img_to_array\n",
    "#from keras.preprocessing.image import load_img\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b85051e0-0cc9-46ea-8918-4ac339e86337",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load all images in a directory into memory\n",
    "def load_images(path, size=(256,256)):\n",
    "    data_list = list()\n",
    "    # enumerate filenames in directory, assume all are images\n",
    "    for filename in listdir(path):\n",
    "        # load and resize the image\n",
    "        pixels = load_img(path + filename, target_size=size)\n",
    "        # convert to numpy array\n",
    "        pixels = img_to_array(pixels)\n",
    "        # store\n",
    "        data_list.append(pixels)\n",
    "    return asarray(data_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9b3a4928-6ca2-4c46-8c24-466547e603b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = '/home/umni2/a/umnilab/users/mdebnat/Course Project/ECE 50024/Course Project/apple2orange/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1cfa1673-fc2f-47b4-a919-8d3393acc910",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded dataA:  (995, 256, 256, 3)\n"
     ]
    }
   ],
   "source": [
    "#dataA_all = load_images(path + 'trainA/')\n",
    "#print('Loaded dataA: ', dataA_all.shape)\n",
    "\n",
    "dataA = load_images(path + 'trainA/')\n",
    "print('Loaded dataA: ', dataA.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "08081cd5-912b-45f3-88c7-d0b7cc56c793",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.utils import resample\n",
    "#To get a subset of all images, for faster training during demonstration\n",
    "#dataA = resample(dataA_all, \n",
    "                 #replace=False,     \n",
    "                 #n_samples=500,    \n",
    "                 #random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "33368906-4525-49e8-b705-422521457dbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded dataB:  (1019, 256, 256, 3)\n"
     ]
    }
   ],
   "source": [
    "# load dataset B - Photos \n",
    "#dataB_all = load_images(path + 'trainB/')\n",
    "#print('Loaded dataB: ', dataB_all.shape)\n",
    "\n",
    "dataB = load_images(path + 'trainB/')\n",
    "print('Loaded dataB: ', dataB.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "48af6790-3153-485e-bf6d-cb990c34569e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get a subset of all images, for faster training during demonstration\n",
    "#We could have just read the list of files and only load a subset, better memory management. \n",
    "#dataB = resample(dataB_all, \n",
    "                 #replace=False,     \n",
    "                 #n_samples=500,    \n",
    "                 #random_state=42) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ff1ef276-d170-42b0-b62b-61db60a5095e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot source images\n",
    "n_samples = 3\n",
    "for i in range(n_samples):\n",
    "    plt.subplot(2, n_samples, 1 + i)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(dataA[i].astype('uint8'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e91edbce-6f48-44c4-8108-c72de8557c45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot target image\n",
    "for i in range(n_samples):\n",
    "    plt.subplot(2, n_samples, 1 + n_samples + i)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(dataB[i].astype('uint8'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4e9f4fa1-ff05-478b-a616-2d7c6db56b84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded (995, 256, 256, 3) (1019, 256, 256, 3)\n"
     ]
    }
   ],
   "source": [
    "# load image data\n",
    "data = [dataA, dataB]\n",
    "print('Loaded', data[0].shape, data[1].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5e39d09a-74f2-46d8-a84b-1c02ff77ec5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preprocess data to change input range to values between -1 and 1\n",
    "# This is because the generator uses tanh activation in the output layer\n",
    "#And tanh ranges between -1 and 1\n",
    "def preprocess_data(data):\n",
    "    # load compressed arrays\n",
    "    # unpack arrays\n",
    "    X1, X2 = data[0], data[1]\n",
    "    # scale from [0,255] to [-1,1]\n",
    "    X1 = (X1 - 127.5) / 127.5\n",
    "    X2 = (X2 - 127.5) / 127.5\n",
    "    return [X1, X2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "195af219-2956-42de-bc3f-ecce5c56b1d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = preprocess_data(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3b010ae3-adfc-4630-99f5-184fd8d5846a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:52:35.868014: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1956] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\n",
      "Skipping registering GPU devices...\n",
      "/home/umni2/a/umnilab/users/mdebnat/anaconda3/envs/gp39/lib/python3.9/site-packages/keras/initializers/initializers.py:120: UserWarning: The initializer RandomNormal is unseeded and being called multiple times, which will return identical values each time (even if the initializer is unseeded). Please update your code to provide a seed to the initializer, or avoid using the same initalizer instance more than once.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "#from cycleGAN_model import define_generator, define_discriminator, define_composite_model, train\n",
    "# define input shape based on the loaded dataset\n",
    "image_shape = dataset[0].shape[1:]\n",
    "# generator: A -> B\n",
    "g_model_AtoB = define_generator(image_shape)\n",
    "# generator: B -> A\n",
    "g_model_BtoA = define_generator(image_shape)\n",
    "# discriminator: A -> [real/fake]\n",
    "d_model_A = define_discriminator(image_shape)\n",
    "# discriminator: B -> [real/fake]\n",
    "d_model_B = define_discriminator(image_shape)\n",
    "# composite: A -> B -> [real/fake, A]\n",
    "c_model_AtoB = define_composite_model(g_model_AtoB, d_model_B, g_model_BtoA, image_shape)\n",
    "# composite: B -> A -> [real/fake, B]\n",
    "c_model_BtoA = define_composite_model(g_model_BtoA, d_model_A, g_model_AtoB, image_shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49d458e0-8dbb-4cd0-b2ca-02fb690a5ff6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 1s 1s/step\n",
      "1/1 [==============================] - 1s 1s/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:52:43.786781: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:03.629832: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:04.539025: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:04.623323: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:25.149633: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:26.000948: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>1, dA[0.948,1.035] dB[0.760,0.983] g[19.834,20.183]\n",
      "1/1 [==============================] - 1s 846ms/step\n",
      "1/1 [==============================] - 1s 879ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:53:27.907924: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:31.315372: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:31.393209: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:31.472095: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:34.924487: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:35.012584: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>2, dA[2.389,1.695] dB[2.680,1.089] g[20.386,20.666]\n",
      "1/1 [==============================] - 1s 883ms/step\n",
      "1/1 [==============================] - 1s 863ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:53:36.933202: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:40.221971: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:40.292596: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:40.374516: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:43.679066: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:43.763198: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>3, dA[5.788,3.803] dB[2.069,2.351] g[16.283,19.721]\n",
      "1/1 [==============================] - 1s 905ms/step\n",
      "1/1 [==============================] - 1s 960ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:53:45.821706: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:49.110670: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:49.179182: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:49.261583: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:52.855855: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:52.938802: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>4, dA[2.690,7.128] dB[8.808,2.104] g[20.349,24.388]\n",
      "1/1 [==============================] - 1s 812ms/step\n",
      "1/1 [==============================] - 1s 907ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:53:54.839732: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:53:58.325392: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:58.394922: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:53:58.476456: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:01.715434: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:01.792014: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>5, dA[2.178,3.326] dB[5.434,3.060] g[21.053,20.047]\n",
      "1/1 [==============================] - 1s 880ms/step\n",
      "1/1 [==============================] - 1s 898ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:03.767637: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:07.167828: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:07.230906: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:07.306094: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:10.652693: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:10.734813: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>6, dA[4.542,1.563] dB[3.557,2.982] g[19.352,20.908]\n",
      "1/1 [==============================] - 1s 881ms/step\n",
      "1/1 [==============================] - 1s 886ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:12.689005: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:16.035498: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:16.100795: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:16.177076: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:19.438774: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:19.510332: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>7, dA[2.067,1.304] dB[1.935,4.572] g[25.040,20.731]\n",
      "1/1 [==============================] - 1s 918ms/step\n",
      "1/1 [==============================] - 1s 847ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:21.475648: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:24.580556: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:24.642145: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:24.720295: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:28.069155: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:28.141701: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>8, dA[3.014,1.482] dB[4.882,1.051] g[17.005,17.693]\n",
      "1/1 [==============================] - 1s 855ms/step\n",
      "1/1 [==============================] - 1s 834ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:30.021050: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:33.375763: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:33.440947: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:33.527244: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:36.862180: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:36.951302: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>9, dA[3.045,1.622] dB[2.699,0.704] g[14.513,14.721]\n",
      "1/1 [==============================] - 1s 883ms/step\n",
      "1/1 [==============================] - 1s 885ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:38.893792: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:42.146058: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:42.212834: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:42.291930: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:45.670946: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:45.748281: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>10, dA[0.683,0.697] dB[0.743,0.816] g[13.445,13.096]\n",
      "1/1 [==============================] - 1s 917ms/step\n",
      "1/1 [==============================] - 1s 850ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:47.692936: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:51.024417: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:51.098399: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:51.176581: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:54.427360: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:54.502910: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>11, dA[1.125,0.679] dB[0.694,0.734] g[16.090,15.098]\n",
      "1/1 [==============================] - 1s 863ms/step\n",
      "1/1 [==============================] - 1s 949ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:54:56.508174: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:54:59.884617: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:54:59.951355: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:00.029044: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:55:03.408733: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:03.482704: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>12, dA[0.769,0.693] dB[0.667,0.771] g[13.801,13.249]\n",
      "1/1 [==============================] - 1s 853ms/step\n",
      "1/1 [==============================] - 1s 814ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:55:05.321335: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:55:08.763928: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:08.832068: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:08.912283: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:55:12.238285: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:12.322659: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>13, dA[0.684,0.521] dB[0.484,0.732] g[14.004,12.891]\n",
      "1/1 [==============================] - 1s 853ms/step\n",
      "1/1 [==============================] - 1s 869ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-05-04 21:55:14.252060: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:55:17.520785: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:17.585748: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:17.662405: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_5' with dtype float and shape [1,256,256,3]\n",
      "\t [[{{node Placeholder/_5}}]]\n",
      "2023-05-04 21:55:20.956363: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n",
      "2023-05-04 21:55:21.056116: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_1' with dtype float and shape [1,16,16,1]\n",
      "\t [[{{node Placeholder/_1}}]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration>14, dA[0.684,0.491] dB[0.891,0.530] g[12.640,13.038]\n",
      "1/1 [==============================] - 1s 900ms/step\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime \n",
    "start1 = datetime.now() \n",
    "# train models\n",
    "train(d_model_A, d_model_B, g_model_AtoB, g_model_BtoA, c_model_AtoB, c_model_BtoA, dataset, epochs=8)\n",
    "\n",
    "stop1 = datetime.now()\n",
    "#Execution time of the model \n",
    "execution_time = stop1-start1\n",
    "print(\"Execution time is: \", execution_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce5d730c-0660-49f5-9b5b-99703f2d1ad6",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install dill"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0aa4b31d-d4de-48a0-8e15-d5c56b818273",
   "metadata": {},
   "source": [
    "### Use the saved cyclegan models for image translation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "511544e7-3b90-48e4-95ac-46d9243dc40f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from keras_contrib.layers.normalization.instancenormalization import InstanceNormalization\n",
    "#from keras.models import load_model\n",
    "#from matplotlib import pyplot\n",
    "#from numpy.random import randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e627959-94d0-4652-bb0d-12250783c1f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# select a random sample of images from the dataset\n",
    "#def select_sample(dataset, n_samples):\n",
    "    # choose random instances\n",
    "    #ix = randint(0, dataset.shape[0], n_samples)\n",
    "    # retrieve selected images\n",
    "    #X = dataset[ix]\n",
    "    #return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea1ecc7d-6ce5-4c9e-919c-b7328cb453b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot the image, its translation, and the reconstruction\n",
    "#def show_plot(imagesX, imagesY1, imagesY2):\n",
    "    #images = vstack((imagesX, imagesY1, imagesY2))\n",
    "    #titles = ['Real', 'Generated', 'Reconstructed']\n",
    "    # scale from [-1,1] to [0,1]\n",
    "    #images = (images + 1) / 2.0\n",
    "    # plot images row by row\n",
    "    #for i in range(len(images)):\n",
    "        # define subplot\n",
    "        #pyplot.subplot(1, len(images), 1 + i)\n",
    "        # turn off axis\n",
    "        #pyplot.axis('off')\n",
    "        # plot raw pixel data\n",
    "        #pyplot.imshow(images[i])\n",
    "        # title\n",
    "        #pyplot.title(titles[i])\n",
    "    #pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f8cc2f0-bcfa-49cb-8c62-78d25d021c8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load dataset\n",
    "#A_data = resample(dataA_all, \n",
    "                 #replace=False,     \n",
    "                 #n_samples=50,    \n",
    "                 #random_state=42) # reproducible results\n",
    "\n",
    "#B_data = resample(dataB_all, \n",
    "                 #replace=False,     \n",
    "                 #n_samples=50,    \n",
    "                 #random_state=42) # reproducible results\n",
    "\n",
    "#A_data = (A_data - 127.5) / 127.5\n",
    "#B_data = (B_data - 127.5) / 127.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4282534a-8954-4307-824b-1ba646f75caa",
   "metadata": {},
   "source": [
    "### load the models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7b253d0-3d8b-4d30-8e53-6bdabaadc5e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#cust = {'InstanceNormalization': InstanceNormalization}\n",
    "#model_AtoB = load_model('/home/umni2/a/umnilab/users/mdebnat/Course Project/ECE 50024/Course Project/g_model_AtoB_002500.h5', cust)\n",
    "#model_BtoA = load_model('/home/umni2/a/umnilab/users/mdebnat/Course Project/ECE 50024/Course Project/g_model_BtoA_002500.h5', cust)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "646c1af0-97b9-43c0-9125-f9c9f2993454",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot A->B->A (Monet to photo to Monet)\n",
    "#A_real = select_sample(A_data, 1)\n",
    "#B_generated  = model_AtoB.predict(A_real)\n",
    "#A_reconstructed = model_BtoA.predict(B_generated)\n",
    "#show_plot(A_real, B_generated, A_reconstructed)\n",
    "\n",
    "# plot B->A->B (Photo to Monet to Photo)\n",
    "#B_real = select_sample(B_data, 1)\n",
    "#A_generated  = model_BtoA.predict(B_real)\n",
    "#B_reconstructed = model_AtoB.predict(A_generated)\n",
    "#show_plot(B_real, A_generated, B_reconstructed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c45ffd35-d3ef-4dda-a4da-2047c9e872d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load a single custom image\n",
    "#test_image = load_img('/home/umni2/a/umnilab/users/mdebnat/Course Project/ECE 50024/Course Project/monet2photo/apple_test_photo2monet.jpg')\n",
    "#test_image = img_to_array(test_image)\n",
    "#test_image_input = np.array([test_image])  # Convert single image to a batch.\n",
    "#test_image_input = (test_image_input - 127.5) / 127.5\n",
    "\n",
    "# plot B->A->B (Photo to Monet to Photo)\n",
    "#monet_generated  = model_BtoA.predict(test_image_input)\n",
    "#photo_reconstructed = model_AtoB.predict(monet_generated)\n",
    "#show_plot(test_image_input, monet_generated, photo_reconstructed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06d64c5b-fafa-4af0-88f5-8f9d49a493bc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
